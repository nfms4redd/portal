<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
		http://www.springframework.org/schema/mvc     http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"
       default-autowire="autodetect">

    <!-- Spring annotations -->
    <context:component-scan base-package="org.fao.unredd.portal" />
    <mvc:annotation-driven />
    <bean id="handlerMapping"
          class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
        <property name="alwaysUseFullPath" value="true" />
        <property name="interceptors">
            <ref bean="localeChangeInterceptor" />
        </property>
    </bean>
    <bean id="handlerAdapter"
          class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="alwaysUseFullPath" value="true" />
    </bean>

    <!-- JSP resolver -->
    <bean id="viewResolver"
          class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/" />
        <property name="suffix" value=".jsp" />
        <property name="attributes" value="" />
    </bean>

    <!-- Locale -->
    <mvc:interceptors>
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
            <property name="paramName" value="lang" />
        </bean>
    </mvc:interceptors>
    <bean id="messageSource" class="org.fao.unredd.portal.BundleMessage">
        <property name="basename" value="file:#{config.dir}/messages/messages" />
        <property name="defaultEncoding" value="UTF-8" />
        <property name="fileEncodings" value="UTF-8" />
    </bean>
    <bean id="localeChangeInterceptor"
          class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
        <property name="paramName" value="lang" />
    </bean>
    <bean id="localeResolver"
          class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
        <property name="defaultLocale" value="en" />
    </bean>

    <!-- ReCaptcha -->
    <!--<bean id="reCaptcha" class="net.tanesha.recaptcha.ReCaptchaImpl">-->
        <!--<property name="privateKey" value="#{config.properties.getProperty('recaptcha.privatekey')}" />-->
        <!--<property name="publicKey" value="#{config.properties.getProperty('recaptcha.publickey')}" />-->
        <!--<property name="includeNoscript" value="false" />-->
    <!--</bean>-->

    <bean id="layerFactory" class="org.fao.unredd.layers.folder.FolderLayerFactory">
        <constructor-arg type="java.io.File" value="#{config.properties.getProperty('layers.rootFolder')}"/>
    </bean>

    <!-- Using Apache DBCP as a connection pooling library.
         Replace this with your preferred DataSource implementation -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          init-method="createDataSource" destroy-method="close">
        <!--<property name="driverClassName" value="com.mysql.jdbc.Driver" />-->
        <!--<property name="url" value="jdbc:mysql://localhost:3306/unredd" />-->
        <!--<property name="username" value="root" />-->
        <!--<property name="password" value="" />-->
        <property name="driverClassName" value="org.postgresql.Driver" />
        <property name="url" value="jdbc:postgresql://localhost/jooq_test" />
        <property name="username" value="unredd" />
        <property name="password" value="unredd" />
    </bean>

    <!-- Using Spring JDBC for transaction management -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <bean id="transactionAwareDataSource"
          class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
        <constructor-arg ref="dataSource" />
    </bean>

    <!-- Bridging Spring JDBC data sources to jOOQ's ConnectionProvider -->
    <bean class="org.jooq.impl.DataSourceConnectionProvider" name="connectionProvider">
        <constructor-arg ref="transactionAwareDataSource" />
    </bean>

    <!--<bean id="dsl" class="org.jooq.impl.DefaultDSLContext">-->
    <!--<constructor-arg ref="config" />-->
    <!--</bean>-->

    <bean id="dsl" class="org.jooq.impl.DSLContextImpl">
        <constructor-arg index="0" ref="dbConfig"/>
    </bean>

    <!-- Invoking an internal, package-private constructor for the example
         Implement your own Configuration for more reliable behaviour -->
    <bean class="org.jooq.impl.DefaultConfiguration" name="dbConfig">
        <constructor-arg index="0" ref="connectionProvider" />
        <constructor-arg index="1"><null /></constructor-arg>
        <constructor-arg index="2"><value type="org.jooq.SQLDialect">POSTGRES</value></constructor-arg>
        <constructor-arg index="3"><null /></constructor-arg>
        <constructor-arg index="4"><null /></constructor-arg>
    </bean>
</beans>
